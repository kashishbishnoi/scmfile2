import tkinter as tk
from tkinter import messagebox
import random

class HangmanGame(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Hangman Game")
        self.geometry("400x300")

        self.words = {
            "Chile": "Chilean cuisine is known for its delicious dishes including seafood specialties",
            "Brazil": "Soccer is the most popular sport of this country.",
            "Norway": "It is a Nordic country in Northern Europe.",
            "Denmark": "It is known for its cycling-friendly infrastructure and culture",
            "Serbia": "It is predominantly Orthodox Christian.",
            "Mexico": "It has produced influential cultural figures such as artists Frida Kahlo",
        }

        self.figure = [
            '''
            
            +---+
               |
               |
               |
              ===''',
            '''
              
           +---+
           O   |
               |
               |
              ===''',
            '''
           +---+
           O   |
           |   |
               |
              ===''',
            '''
           +---+
           O   |
          /|   |
               |
              ===''',
            '''
           +---+
           O   |
          /|\  |
               |
              ===''',
            '''
           +---+
           O   |
          /|\  |
          /    |
             ===''',
            '''
           +---+
           O   |
          /|\  |
          / \  |
             ==='''
        ]

        self.word = ""
        self.word_hint = ""
        self.remaining_attempts = 6
        self.guessed_letters = []

        self.word_label = tk.Label(self, text="", font=("Arial", 16))
        self.word_label.pack(pady=10)

        self.remaining_attempts_label = tk.Label(self, text=f"Remaining Attempts: {self.remaining_attempts}", font=("Arial", 12))
        self.remaining_attempts_label.pack(pady=5)

        self.guess_entry = tk.Entry(self, font=("Arial", 12))
        self.guess_entry.pack(pady=5)

        self.guess_button = tk.Button(self, text="Guess", command=self.guess_letter)
        self.guess_button.pack(pady=5)

        self.restart_button = tk.Button(self, text="Restart", command=self.restart_game)
        self.restart_button.pack(pady=5)

        self.init_game()

    def init_game(self):
        self.word = random.choice(list(self.words.keys()))
        self.word_hint = self.words[self.word]
        self.hidden_word = ["_"] * len(self.word)
        self.update_word_label()
        self.remaining_attempts = 6
        self.update_remaining_attempts_label()
        self.guessed_letters = []

    def update_word_label(self):
        displayed_word = " ".join(self.hidden_word)
        self.word_label.config(text=displayed_word)

    def update_remaining_attempts_label(self):
        self.remaining_attempts_label.config(text=f"Remaining Attempts: {self.remaining_attempts}")

    def guess_letter(self):
        letter = self.guess_entry.get().lower()
        self.guess_entry.delete(0, tk.END)

        if not letter.isalpha() or len(letter) != 1:
            messagebox.showerror("Invalid Input", "Please enter a single letter.")
            return

        if letter in self.guessed_letters:
            messagebox.showinfo("Already Guessed", "You have already guessed this letter.")
            return

        self.guessed_letters.append(letter)

        if letter in self.word.lower():
            for i, char in enumerate(self.word.lower()):
                if char == letter:
                    self.hidden_word[i] = self.word[i]
            self.update_word_label()
            if "_" not in self.hidden_word:
                messagebox.showinfo("Congratulations", "You have guessed the word!")
                self.restart_game()
        else:
            self.remaining_attempts -= 1
            self.update_remaining_attempts_label()
            if self.remaining_attempts == 0:
                messagebox.showinfo("Game Over", f"Sorry, you lost. The word was: {self.word}")
                self.restart_game()

    def restart_game(self):
        self.init_game()

if __name__ == "__main__":
    app = HangmanGame()
    app.mainloop()
